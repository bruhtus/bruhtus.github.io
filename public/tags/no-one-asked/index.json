[
    {
        "ref": "https://bruhtus.github.io/posts/vim-statusline/",
        "title": "Guide to Make Your Own Vim/Neovim Statusline",
        "section": "posts",
        "tags": ["No one asked","Vim"],
        "date" : "2021.08.20",
        "body": " We don\u0026rsquo;t have to install vim plugin to get a statusline if we don\u0026rsquo;t want to.\n Introduction Hi everyone! In this post I will talk about making your custom statusline in vim. There are a lot of plugins out there that makes vim statusline way better and works out of the box.\n\u0026ldquo;Why would someone going through all the trouble while there\u0026rsquo;s a plugin for that?\u0026rdquo;, you might ask. Well, for me personally, having one less plugin is a good thing. I don\u0026rsquo;t really want to depend on the plugin for something simple such as statusline. If I can build it myself, then I will build it myself rather than using a plugin. Also, it save me a lot of time to figure out which plugin causes the issue if I have less plugin! Oh, another thing, some vim statusline plugin can slow down your startup time (I\u0026rsquo;m looking at you vim-airline) so be careful about that. Alright then, let\u0026rsquo;s get into it!\nRequirements Before we start, we need to prepare a few things:\n Vim/Neovim (we will use vim script or VimL in this post) set laststatus=2 (always display the statusline) Patience (don\u0026rsquo;t be scared when you see an error, calm down!)  If all is set, then let\u0026rsquo;s get started!\nDisable Old Statusline Before we move further, you need to disable or remove your old statusline plugin and the config. If you don\u0026rsquo;t want to remove your old statusline plugin config, you can commented out those line/config in your vimrc or init.vim.\nDifferent statusline for active and inactive window You can have different statusline for active and inactive window by using autocmd event. \u0026ldquo;What is autocmd?\u0026rdquo; you might ask, go take a look at :help autocmd for more info. To make it simple, autocmd is to automatically execute a command on certain event which you can check on :help autocmd-events for more info.\nSo, how can we have different statusline for active and inactive window? First, we need to make a function to define our active or inactive statusline component. You can create the function similar to this:\n1\u0026#34; component for active window2function! StatuslineActive()3\u0026#34; the component goes here4endfunction56\u0026#34; component for inactive window7function! StatuslineInactive()8\u0026#34; the component goes here9endfunction1011\u0026#34; load statusline using `autocmd` event with this function12function! StatuslineLoad(mode)13 if a:mode ==# \u0026#39;active\u0026#39;14\u0026#34; to make it simple, %! is to evaluate the current changes in the window15\u0026#34; it can be useful for evaluate current mode in statusline. For more info:16\u0026#34; :help statusline.17 setlocal statusline=%!StatuslineActive()18 else19 setlocal statusline=%!StatuslineInactive()20 endif21endfunctionand also the autocmd similar to this:\n1\u0026#34; so that autocmd didn\u0026#39;t stack up and slow down vim2augroup statusline_startup3 autocmd!4\u0026#34; for more info :help WinEnter and :help BufWinEnter5 autocmd WinEnter,BufWinEnter * call StatuslineLoad(\u0026#39;active\u0026#39;)6 autocmd WinLeave * call StatuslineLoad(\u0026#39;inactive\u0026#39;)7augroup ENDNow we can compose our statusline component. We can take a look at :help statusline for supported items like for example f for relative path to the file in the buffer. You can choose whatever item you like in your statusline, and put it in the previous function similar to this:\n1function! StatuslineActive()2\u0026#34; if we want to add `f` items in our statusline3 let l:filename = \u0026#39;%f\u0026#39;4\u0026#34; if we want to add \u0026#39;m\u0026#39; items in our statusline5 let l:mod = \u0026#39;%m\u0026#39;6\u0026#34; the `.` is basically to ignore whitespace before and put it right after the previous component7 return l:filename.l:mod8endfunctionWhy we need to do that? well, I\u0026rsquo;ll explain it in next section\nCurrent Mode in Statusline If you want to put your current mode in your statusline, you can do it with a function similar to this:\n1function! StatuslineMode() abort23 let l:currentmode={4 \\ \u0026#39;n\u0026#39;: \u0026#39;N\u0026#39;,5 \\ \u0026#39;v\u0026#39;: \u0026#39;V\u0026#39;,6 \\ \u0026#39;V\u0026#39;: \u0026#39;VL\u0026#39;,7 \\ \u0026#39;^V\u0026#39;: \u0026#39;VB\u0026#39;,8 \\ \u0026#39;s\u0026#39;: \u0026#39;S\u0026#39;,9 \\ \u0026#39;S\u0026#39;: \u0026#39;SL\u0026#39;,10 \\ \u0026#39;^S\u0026#39;: \u0026#39;SB\u0026#39;,11 \\ \u0026#39;i\u0026#39;: \u0026#39;I\u0026#39;,12 \\ \u0026#39;R\u0026#39;: \u0026#39;R\u0026#39;,13 \\ \u0026#39;c\u0026#39;: \u0026#39;C\u0026#39;,14 \\ \u0026#39;t\u0026#39;: \u0026#39;T\u0026#39;}1516 let l:modecurrent = mode()17\u0026#34; use get() -\u0026gt; fails safely, since ^V doesn\u0026#39;t seem to register18\u0026#34; 3rd arg is used when return of mode() == 0, which is case with ^V19\u0026#34; thus, ^V fails -\u0026gt; returns 0 -\u0026gt; replaced with \u0026#39;VB\u0026#39;20 let l:modelist = toupper(get(l:currentmode, l:modecurrent, \u0026#39;VB\u0026#39;))21 let l:current_status_mode = l:modelist22 return l:current_status_mode23endfunctionand put it inside of your statusline function like this:\n1function! StatuslineActive()2 let l:filename = \u0026#39;%f\u0026#39;3 let l:mod = \u0026#39;%m\u0026#39;4\u0026#34; `w:` is basically local variable to current window5\u0026#34; and `l:` is basically local variable to function. For more info :help E1216 let w:mode = \u0026#39;%{StatuslineMode()}\u0026#39;7 return w:mode.l:filename.l:mod8endfunctionNow, if we want to change the current mode background based on the current mode, we can do something like this:\n1\u0026#34; define Normal mode color, Insert mode color, and so on2hi NormalModeColor ctermbg=... ctermfg=... guifg=#... guibg=#...3hi InsertModeColor ctermbg=... ctermfg=... guifg=#... guibg=#...45function! StatuslineActive()6 let l:filename = \u0026#39;%f\u0026#39;7 let l:mod = \u0026#39;%m\u0026#39;8 if mode() ==# \u0026#39;n\u0026#39;9 let w:mode = \u0026#39;%#NormalModeColor#%{StatuslineMode()}\u0026#39;10 elseif mode() ==# v:insertmode11 let w:mode = \u0026#39;%#InsertModeColor#%{StatuslineMode()}\u0026#39;12 endif13\u0026#34; %* is basically to restore highlight to StatusLine highlight group14 return w:mode.\u0026#39;%* \u0026#39;.l:filename.l:mod15endfunctionGit Branch in Statusline If you install vim-fugitive plugin, then you can use fugitive#head() in your statusline like this:\n1function! StatuslineActive()2 let l:filename = \u0026#39;%f\u0026#39;3 let l:mod = \u0026#39;%m\u0026#39;4 if mode() ==# \u0026#39;n\u0026#39;5 let w:mode = \u0026#39;%#NormalModeColor#%{StatuslineMode()}\u0026#39;6 elseif mode() ==# v:insertmode7 let w:mode = \u0026#39;%#InsertModeColor#%{StatuslineMode()}\u0026#39;8 endif9\u0026#34; make sure it doesn\u0026#39;t throw an error if `vim-fugitive` is not installed10 let l:git = \u0026#34;%{exists(\u0026#39;*FugitiveHead\u0026#39;) ? fugitive#head() : \u0026#39;\u0026#39;}\u0026#34;11\u0026#34; to separate left and right side12 let l:sep = \u0026#39;%=\u0026#39;13 return w:mode.\u0026#39;%* \u0026#39;.l:filename.l:mod.l:sep.l:git14endfunctionalternatively, you can use system() command to get the current git branch (for more info :help system()) like this:\n1function! StatuslineActive()2 let l:filename = \u0026#39;%f\u0026#39;3 let l:mod = \u0026#39;%m\u0026#39;4 if mode() ==# \u0026#39;n\u0026#39;5 let w:mode = \u0026#39;%#NormalModeColor#%{StatuslineMode()}\u0026#39;6 elseif mode() ==# v:insertmode7 let w:mode = \u0026#39;%#InsertModeColor#%{StatuslineMode()}\u0026#39;8 endif9\u0026#34; for more info :help E12110 let g:gitbranchcmd = \u0026#34;git branch --show-current 2\u0026gt;/dev/null | tr -d \u0026#39;\\n\u0026#39;\u0026#34;11\u0026#34; use system() if vim-fugitive not installed12 let l:git = \u0026#34;%{exists(\u0026#39;*FugitiveHead\u0026#39;) ? fugitive#head() : system(g:gitbranchcmd)}\u0026#34;13 let l:sep = \u0026#39;%=\u0026#39;14 return w:mode.\u0026#39;%* \u0026#39;.l:filename.l:mod.l:sep.l:git15endfunctionSame Statusline for active and inactive window Now, if we want our statusline to be the same whether in active or inactive window. We can make simplify it by only make one function and not using autocmd. It will look something like this:\n1function! StatuslineComponent()2\u0026#34; your component goes here3endfunction45set statusline=%!StatuslineComponent()and you can use some tips from previous section too!\nConclusion This guide is for do-it-yourself kind of people, so it\u0026rsquo;s only giving some pointer you can use to make your own statusline. I don\u0026rsquo;t want to tell you what to put in your statusline, it is your OWN statusline after all, so you need to know what you want in it. Also, I\u0026rsquo;m not a vim script expert so please forgive me if I miss something. If you have any question regarding this post, feel free to hit me up on twitter (@diawanchris)! See you later!\nReferences  Kade Killary blog post . Junegunn\u0026rsquo;s statusline .  "
    }
,
    {
        "ref": "https://bruhtus.github.io/posts/ssh-google-colab/",
        "title": "Access Google Colab Through SSH and SSHFS",
        "section": "posts",
        "tags": ["Linux","No one asked"],
        "date" : "2021.06.22",
        "body": " Have you ever want a terminal emulator in google colab instead of jupyter notebook? Well, here it is bois!\n Skip-able Part First thing first, i prefer to use vim/neovim instead of jupyter notebook and that\u0026rsquo;s why i prefer to use terminal or terminal emulator to do things as much as possible. I know jupyter notebook has it\u0026rsquo;s own vim emulation, but it\u0026rsquo;s not as good as the OG vim/neovim. Also, i know you can have neovim inside your browser using firenvim plugin , but i\u0026rsquo;m not sure how useful it is and do i really want that? i mean, my IDE is a terminal or terminal emulator. So, unless it\u0026rsquo;s a terminal or terminal emulator then i won\u0026rsquo;t feel comfortable using it.\nThat\u0026rsquo;s why i\u0026rsquo;m trying to figure out how to access google colab through terminal emulator, and it turns out i can do that!\n As far as i know, google colab support terminal emulator but only for pro user. I haven\u0026rsquo;t try it yet, so i might be wrong.\n Requirements To make this work, please make sure that SSH and SSHFS installed on your system. You can install both of them using your distro package manager or something similar (there are a lot of tutorial on how to install SSH or SSHFS).\nA Brief Intro to SSH According to wikipedia , Secure Shell (SSH) is a cryptographic network protocol for operating network services securely over an unsecured network. Typical applications include remote command-line login and remote command execution, but any network service can be secured with SSH.\nTo make it simple, SSH let you access another computer/server and you can use command line interface (CLI) to interact with those computer/server.\nA Brief Intro to SSHFS According to the project github repo , SSHFS allows you to mount a remote filesystem using SFTP.\nTo make it simple, SSHFS let you mount the computer/server storage to your local system and you can treat it like the usual storage on your local system, like using mv and cp command.\nAccess Google Colab Using SSH First thing first, you need to have ngrok account. If you doesn\u0026rsquo;t have ngrok account, then you can register here .\nAfter that, you need to make a new google colab notebook. And then, paste the code below:\n1#CODE 2 3#Generate root password 4import random, string 5password = \u0026#39;\u0026#39;.join(random.choice(string.ascii_letters + string.digits) for i in range(20)) 6 7#Download ngrok 8! wget -q -c -nc https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip 9! unzip -qq -n ngrok-stable-linux-amd64.zip 10#Setup sshd 11! apt-get install -qq -o=Dpkg::Use-Pty=0 openssh-server pwgen \u0026gt; /dev/null 12#Set root password 13! echo root:$password | chpasswd 14! mkdir -p /var/run/sshd 15! echo \u0026#34;PermitRootLogin yes\u0026#34; \u0026gt;\u0026gt; /etc/ssh/sshd_config 16! echo \u0026#34;PasswordAuthentication yes\u0026#34; \u0026gt;\u0026gt; /etc/ssh/sshd_config 17! echo \u0026#34;LD_LIBRARY_PATH=/usr/lib64-nvidia\u0026#34; \u0026gt;\u0026gt; /root/.bashrc 18! echo \u0026#34;export LD_LIBRARY_PATH\u0026#34; \u0026gt;\u0026gt; /root/.bashrc 19 20#Run sshd 21get_ipython().system_raw(\u0026#39;/usr/sbin/sshd -D \u0026amp;\u0026#39;) 22 23#Ask token 24print(\u0026#34;Copy authtoken from https://dashboard.ngrok.com/auth\u0026#34;) 25import getpass 26authtoken = getpass.getpass() 27 28#Create tunnel 29get_ipython().system_raw(\u0026#39;./ngrok authtoken $authtoken \u0026amp;\u0026amp; ./ngrok tcp 22 \u0026amp;\u0026#39;) 30#Print root password 31print(\u0026#34;Root password: {}\u0026#34;.format(password)) 32#Get public address 33! curl -s http://localhost:4040/api/tunnels | python3 -c \\ 34\t\u0026#34;import sys, json; print(json.load(sys.stdin)[\u0026#39;tunnels\u0026#39;][0][\u0026#39;public_url\u0026#39;])\u0026#34; What that code does is basically create a connection from google colab back-end with ngrok so that we can access the google colab back-end using SSH and SSHFS. You can check the github gist for more detail.\nAfter that, you can decide whether to mount your google drive to google colab to or not. If you decide to mount your google drive to google colab, then later on you can mount your google drive using SSHFS.\nAfter you setup all of that, run the code. After you run the code, it gonna request you to copy your ngrok authtoken from ngrok dashboard . If there\u0026rsquo;s an error after you input ngrok authtoken, you can just re-run the code.\nAfter that, you can see the Root password and something similar to tcp://n.tcp.ngrok.io:xxxxx (which n and x represent any number from 0-9)\nNext, you can access the google colab using SSH with the following command:\n1ssh -p xxxxx root@n.tcp.ngrok.io If there\u0026rsquo;s a question \u0026ldquo;Are you sure you want to continue connecting?\u0026rdquo;, answer yes. That was to save the SSH address so that you can connect to it again in the future. But, if you use google google colab then you need to make new SSH address because each SSH session restart when google colab restart. That is one of the downside for this method.\nAccess Google Drive in Google Colab If you mount google drive before you activate google colab, then you can access google drive too. You can access google drive in google colab using SSHFS.\nIf you can already access google colab back-end using SSH, then all you need too do is to run this command:\n1sshfs -p xxxxx root@n.tcp.ngrok.io:/content/drive/MyDrive /mnt/colab The command is almost the same as SSH command from before, the difference is that you need to specify which directory you want to mount on the google colab (in above example is google drive which has path /content/drive/MyDrive) and which directory you want to mount it on the local system (in above example is on /mnt/colab).\nYou can choose to mount google drive on any other directory you want, even on your home directory. I usually mount it on /mnt because it\u0026rsquo;s already a habit of mine to mount an external drive to either /mnt or /run/media. And also, make sure the directory you want to mount your drive into is already exist. I already create colab directory beforehand, so i can mount the google drive into /mnt/colab.\nUpside and Downside There\u0026rsquo;s always an upside and downside of things, and this method is also the same. Below is a few upside and downside that i notice when using this method.\nThe Upside  You can use it like the usual terminal or terminal emulator, with familiar command and vim/neovim in it. If you use SSHFS, you can update your script directly from your terminal emulator to google colab through google drive. Basically you can update your script in google drive directly from your terminal emulator.  The Downside  SSH connection with ngrok only last around 40 minutes, so if you need a long time to run your code then you should use the google colab front-end instead. Use SSH and SSHFS to update script instead of running the script. If you have slow internet connection, then it\u0026rsquo;s gonna be a bit of lag when you interact with google colab back-end CLI. SSH session restart when the google colab restart, and SSH session only last for around 40 minutes so you might need to start over again.  Conclusion When you see that the method has a lot more downside rather than upside, you might be thinking \u0026ldquo;why should i use this method?\u0026rdquo;. Well, only use this method if you feel more comfortable using terminal emulator rather than jupyter notebook, other than that, it\u0026rsquo;s not really worth your time.\nUse this method while it lasts, as far as i know, there was a time when this method doesn\u0026rsquo;t work. At the time of writing this post, this method still works but i\u0026rsquo;m not sure if google gonna let this happen for a long time. Anyway, updating the script through SSHFS is really convenient for me.\nReferences  Google colab SSH github gist . How to SSH into google colab medium post . Access your google drive using ssh medium post . Distrotube youtube video on SSHFS .  "
    }
,
    {
        "ref": "https://bruhtus.github.io/posts/pyv/",
        "title": "Pyv: Minimalist Python Venv Management Tool",
        "section": "posts",
        "tags": ["No one asked","Shell","Python"],
        "date" : "2021.04.16",
        "body": " This is a continuation from my previous post (you can check it here ). Long story short, this is a minimalist way to manage your python virtual environment. All you need is python and git.\n What Is Pyv? Here\u0026rsquo;s a brief intro to what is pyv:\n Pyv is a simple shell function that let you manage python virtual environment that decoupled from project directory.\n To put it simply, pyv move the virtual environment to $PYV_dir which by default is $HOME/.cache/pyv\nHow Pyv Manage Virtual Environment Pyv can create, remove, activate, deactivate, and list python virtual environment. Below is the explanation for each action that pyv can do.\nCreate Virtual Environment Pyv create python virtual environment using python default command python -m venv to $PYV_DIR/{given-name}. The given-name can be from git repo name or user input.\nIf the user give pyv command an argument then pyv gonna create python virtual environment with that argument name. For example:\n1pce something-big With the command above, pyv gonna create python virtual environment with the name something-big. pce is pyv command to to create python virtual environment (why would i made something with long command?).\nPyv also can create python virtual environment with git repo name. If you give no argument and just enter pce in a working git repo then pyv gonna create python virtual environment using the git repo name.\n\u0026ldquo;How does pyv do that?\u0026rdquo; you might ask, well, pyv use the command git rev-parse --show-toplevel to get the git root directory name (with a lot of trimming of course). For those who don\u0026rsquo;t know what git root directory, to make simple, git root directory is the directory where you first use git init command or the directory that have .git directory.\nPlease do remember tho, you can only use pce without any argument in git working directory and not in git bare directory. What i mean by git working directory is the normal git repo that has .git directory in it.\nHere\u0026rsquo;s an example of pce without an argument (in case you\u0026rsquo;re still confused):\n1pce Yup, only that. Simple right?\nRemove Virtual Environment After creating virtual environment, how do you delete the virtual environment?\nYou can remove the virtual environment using pre command with or without argument similar to creating virtual environment.\nFor example, we already create something-big python virtual environment. And now we want to remove those virtual environment. All we need to do is something like this:\n1pre something-big Those command gonna invoke the rm command to remove something-big virtual environment directory in $PYV_DIR. So the pre command depends on how you setup your rm command in your shell.\nIf you create virtual environment using the git repo name, and you want to remove those environment, you can use pre without an argument inside those git repo directory (assumming you haven\u0026rsquo;t changed the directory name). How to use the command is the same as when you create the virtual environment, just type\n1pre and you\u0026rsquo;re done.\nActivate Virtual Environment Ok, now you know how to create and remove the virtual environment using pyv. Now, how do you activate those virtual environment?\nBecause we use default python python -m venv command, we need to know how the activate the virtual environment created using those command.\nAccording to python venv documentation , we need to source the activate file in \u0026lt;venv-dir\u0026gt;/bin/activate.\n Did you know that the activate file is also a shell function? Now you know.\n So, the pyv command to activate the virtual environment is pae. Similar to previous command, you can use pae with or without an argument. pae command basically to source activate file in virtual environment directory that located in $PYV_DIR.\nLike previous command, let\u0026rsquo;s say we have something-big virtual env and we want to activate those command. All we need to do is\n1pae something-big or if you create a virtual environment using git repo name (assuming you didn\u0026rsquo;t change the git repo directory name), then you can just use\n1pae without any argument.\nDeactivate Virtual Environment After you know how to create, remove, and activate virtual environment with pyv. Now it\u0026rsquo;s time for you to know how to deactivate virtual environment.\nYou can deactivate the virtual environment either using default deactivate command or using pde. pde is just an alias for deactivate command provided by python venv. You do you.\nPlease keep in mind that you don\u0026rsquo;t need any argument to deactivate virtual environment.\nList Virtual Environment The last thing is how to list all the virtual environment that available?\nTo list all the virtual environment that ever created, you can use pve command without an argument or ls -l $PYV_DIR. pve is just an alias for ls -l $PYV_DIR.\nConclusions There\u0026rsquo;s always an upside/downside to a project, and this project is no exception.\nThe upside is that, it\u0026rsquo;s minimal. If you didn\u0026rsquo;t do anything fancy with your python virtual environment then pyv probably gonna fit your need.\nThe downside is also \u0026ldquo;it\u0026rsquo;s minimal\u0026rdquo;. If you use default options that come with default python venv command, then you can\u0026rsquo;t do that with pyv. Pyv only able to handle python -m venv \u0026lt;env-directory\u0026gt;. That\u0026rsquo;s all.\n At the time of writing this article, i\u0026rsquo;ve only tested pyv in bash and zsh. I might provide support for fish, csh/tcsh in the future.\n References  A few alternative to manage python virtual environment . Python venv documentation .  "
    }
,
    {
        "ref": "https://bruhtus.github.io/posts/python-venv/",
        "title": "Managing Python Virtual Environment",
        "section": "posts",
        "tags": ["No one asked","Python"],
        "date" : "2021.03.02",
        "body": " Have you ever want python virtual environment that decoupled from the project directory like conda but not actually conda (dejavu)? That\u0026rsquo;s what this post is about, a simple way to manage a python virtual environment similar to how conda manage virtual environment without python version management.\n A Brief Intro to Python Virtual Environment To makes thing simpler, python virtual environment is a self-contained directory tree that contains a python installation for a particular version of python plus a number of additional packages.\nWith virtual environment you can minimize the conflicting requirements for each python script you made. For example, application A can have its own virtual environment with python package at version 1.0 installed and application B can have its own virtual environment with python package at version 2.0. If applicatin B need to upgrade the python package to version 3.0 then this will not affect application A\u0026rsquo;s environment with python package at version 1.0.\nLet\u0026rsquo;s Get Started In this post we\u0026rsquo;re only going to use the default python venv to create a virtual environment, the command is something like this:\n1python -m venv \u0026lt;directory-name\u0026gt; In case you\u0026rsquo;re wondering, \u0026ldquo;if we only gonna use the default python command, then what\u0026rsquo;s so special about it?\u0026rdquo;. Let me tell you this, what special about the default python venv command is that we can specify the path of the directory and we can enhance that with a shell script. Please keep in mind that this is a minimalist approach to manage python virtual environment without installing other tools except python and git (we\u0026rsquo;ll get to that later).\nCreate Python Virtual Environment Here\u0026rsquo;s how we make a simple shell script to manage our python environment. First thing first, you should decide where you want all your virtual environment located. If you use miniconda, usually it\u0026rsquo;s in miniconda3/envs/ directory or something along those path, i forgot. I personally want to place my python virtual environment in .cache/python-venv directory because i rarely check my .cache directory and the virtual environment not gonna disturb other shell scripts i have.\nAfter that, we decide whether we give the name to virtual environment ourself or just use git repo root name. Like i told you before, we can use git repo to decide the name of our virtual environment. To make things simpler, what i mean git repo root is the directory where you use command git init to initialize git repo.\nFor example, if you use git init command in nganu directory then you can have your virtual environment named nganu without you enter any name, but if you didn\u0026rsquo;t want to use your git repo root name then you can also insert the name you want, similar to conda create -n \u0026lt;name-env\u0026gt;. With that brief intro, here\u0026rsquo;s the code:\n1#!/bin/sh 2 3gitroot=\u0026#34;$(git rev-parse --show-toplevel 2\u0026gt; /dev/null)\u0026#34; 4trim=\u0026#34;${gitroot%\u0026#34;${gitroot##*[!/]}\u0026#34;}\u0026#34; 5projectdir=\u0026#34;${trim##*/}\u0026#34; 6venvdir=$HOME/.cache/python-venv 7 8mkdir -pv $venvdir 9 10if [ \u0026#34;$1\u0026#34; != \u0026#34;\u0026#34; ]; then 11\tpython -m venv $venvdir/$1 2\u0026gt; /dev/null \u0026amp;\u0026amp; echo \u0026#34;Created $1python venv\u0026#34; 12 13elif [ \u0026#34;$projectdir\u0026#34; != \u0026#34;\u0026#34; ]; then 14\tpython -m venv $venvdir/$projectdir 2\u0026gt; /dev/null \u0026amp;\u0026amp; echo \u0026#34;Created $projectdirpython venv\u0026#34; 15 16else 17\techo \u0026#34;Not git repo, please insert a name for virtual env (for example: pce nganu)\u0026#34; 18 19fi We can get git repo root path using the command git rev-parse --show-toplevel but the problem is, those command give the full path to git repo but what i want is only the name of the git repo root so we need to trim the full path and only give the directory name we want. That\u0026rsquo;s what trim and projectdir in those code did. So the name of the git repo dir is in projectdir variable.\nAfter that, venvdir is for the path you want to save all your virtual environment and the command mkdir -pv $venvdir is to make sure if the directory doesn\u0026rsquo;t exist then it\u0026rsquo;s gonna create the directory.\nThe \u0026quot;$1\u0026quot; != \u0026quot;\u0026quot; to make sure if no argument is given then don\u0026rsquo;t create any virtual environment and skip to next statement, but if there\u0026rsquo;s an argument then make the virtual environment with the argument as the name.\nThe \u0026quot;$projectdir\u0026quot; != \u0026quot;\u0026quot; to make sure if it\u0026rsquo;s not a git repo then don\u0026rsquo;t create any virtual environment and skip to next statement, but if it\u0026rsquo;s a git repo then make the virtual environment with the git repo root as the name.\nLet\u0026rsquo;s say we save those script with the name pce (python create env), you can choose different name, you do you. And don\u0026rsquo;t forget to place those script into your PATH so you can use that without typing the full path. With that in mind, here\u0026rsquo;s a few scenario we can do:\n Without any argument, if it\u0026rsquo;s git repo then it\u0026rsquo;s create virtual env with git repo root name and if it\u0026rsquo;s not git repo then it\u0026rsquo;s not gonna create any virtual env.  1pce With an argument, it\u0026rsquo;s gonna create virtual env with the argument as virtual env name.  1pce nganu #create nganu virtual env Remove Python Virtual Environment After creating virtual environment, we can also delete virtual environment using a shell script. The concept is similar to create virtual environment, the difference is if there\u0026rsquo;s no virtual environment with the same name as user input or git repo root, then the script not gonna delete anything. With that in mind, here\u0026rsquo;s the code:\n1#!/bin/sh 2 3gitroot=\u0026#34;$(git rev-parse --show-toplevel 2\u0026gt; /dev/null)\u0026#34; 4trim=\u0026#34;${gitroot%\u0026#34;${gitroot##*[!/]}\u0026#34;}\u0026#34; 5projectdir=\u0026#34;${trim##*/}\u0026#34; 6venvdir=$HOME/.cache/python-venv 7 8if [ \u0026#34;$1\u0026#34; != \u0026#34;\u0026#34; ]; then 9\trm -r $venvdir/$1 2\u0026gt; /dev/null || \\ 10\techo \u0026#34;No python virtual environment match, nothing deleted\u0026#34; 11 12elif [ \u0026#34;$projectdir\u0026#34; != \u0026#34;\u0026#34; ]; then 13\trm -r $venvdir/$projectdir 2\u0026gt; /dev/null || \\ 14\techo \u0026#34;No python virtual environment match, nothing deleted\u0026#34; 15 16else 17\techo \u0026#34;No python virtual environment match, nothing deleted\u0026#34; 18 19fi Activate and Deactivate Python Virtual Environment For activating the virtual environment, i use shell function and then source that function with your shell config, like .bashrc or .zshrc or something else.\nI did that because i can\u0026rsquo;t really source inside a shell script (it\u0026rsquo;s just gonna create a subprocess and didn\u0026rsquo;t effect the current shell, so you can\u0026rsquo;t activate the virtual environment).\nThe concept is similar to create and remove script above, if the virtual environment name not found then give message \u0026ldquo;Python virtual environment not found, create new one\u0026rdquo;, the difference is that we\u0026rsquo;re sourcing the virtual environment to activate it. With that in mind, here\u0026rsquo;s the code:\n1function pae(){ 2\tlocal gitroot=\u0026#34;$(git rev-parse --show-toplevel 2\u0026gt; /dev/null)\u0026#34; 3\tlocal trim=\u0026#34;${gitroot%\u0026#34;${gitroot##*[!/]}\u0026#34;}\u0026#34; 4\tlocal projectdir=\u0026#34;${trim##*/}\u0026#34; 5\tlocal venvdir=$HOME/.cache/python-venv 6 7\tif [ \u0026#34;$1\u0026#34; != \u0026#34;\u0026#34; ]; then 8\t. $venvdir/$1/bin/activate 2\u0026gt; /dev/null || echo \u0026#34;Python virtual environment not found, create new one\u0026#34; 9 10\telse 11\t. $venvdir/$projectdir/bin/activate 2\u0026gt; /dev/null || echo \u0026#34;Python virtual environment not found, create new one\u0026#34; 12 13\tfi 14} To deactivate the virtual environment, you just need to use deactivate command. And to list all the virtual environment you made, you can use ls command. For example, ls ~/.cache/python-venv (or the path you choose to hold all your virtual environment).\nThe Conclusion What i mean \u0026ldquo;simple\u0026rdquo; earlier is not \u0026ldquo;easier to setup\u0026rdquo;, what i mean is you only need the tools that you probably already have and make a workflow with only that tools to be similar to how conda handles virtual environment.\nThis post is only an alternative way to manage python virtual environment because most python virtual environment tools usually make the virtual environment inside the project directory and i don\u0026rsquo;t really like that, i prefer how conda manage virtual environment but i think conda is overkill to only manage virtual environment and that\u0026rsquo;s why i make those shell script and function to behave the same as conda (without python version control yet).\nI may make this a standalone project if i ever know how to make the installer. And also please keep in mind that this was based on my needs so maybe there\u0026rsquo;s some glitch that i haven\u0026rsquo;t found yet. Ok that\u0026rsquo;s all, hopefully you gain something from this (probably not, like always).\nReferences  A few python virtual environment tools . Python virtual environments documentatton .  "
    }
,
    {
        "ref": "https://bruhtus.github.io/posts/python-vs-shell/",
        "title": "Python Script vs. Shell Script: Command Line Use Case",
        "section": "posts",
        "tags": ["No one asked","Linux","Python","Shell"],
        "date" : "2021.01.14",
        "body": " In this post i\u0026rsquo;m comparing performance python script and shell script that i\u0026rsquo;ve made. The script objective is to check git status on every git repo directory.\n Skip-able Part  Just a background story why i made this post\n Have you wondered what performance between python script and shell script (or some people might say bash script) to run command on terminal? no? same, just kidding. I\u0026rsquo;m curious about shell script because i can do command line stuff with python script too which for my past self is easier to read.\nFor around a month, i\u0026rsquo;ve learned shell scripting from youtube (mostly luke smith videos ) and i gotta say that for command line use case, shell script is more efficient than python script. Please keep in mind that i\u0026rsquo;m not an expert when it comes to python scripting or shell scripting, so there might be some performance enhancement that you can make to my script.\nA Brief Intro to Shell Script You might be wondering \u0026ldquo;what is shell script?\u0026rdquo; well, to put it simpler, it\u0026rsquo;s a script that you can run with shell. Shell, like python, is a programming language and that\u0026rsquo;s why you can run for loop in a terminal like a psychopath, just kidding i did that sometimes (maybe i\u0026rsquo;m a pyschopath? 👀).\nThere are quite a few ways to run shell script, here\u0026rsquo;s some that i know:\n  Make script executable by doing chmod +x \u0026lt;script-name\u0026gt; and then run the script by doing ./\u0026lt;script-name\u0026gt; if you\u0026rsquo;re already in the same directory as the script or chmod +x \u0026lt;path-to-script\u0026gt;/\u0026lt;script-name\u0026gt; and then run the script by doing \u0026lt;path-to-script\u0026gt;/\u0026lt;script-name\u0026gt; if you\u0026rsquo;re not in the same directory as the script. For example: If i want to run my git-status-checker script, then what i would do is type chmod +x git-status-checker if i already in the same directory as git-status-checker script and then run the script by typing ./git-status-checker. But, if i\u0026rsquo;m not in the same directory as git-status-checker, let\u0026rsquo;s say i\u0026rsquo;m in Download directory meanwhile the script is in Script directory, then what i would do is type chmod +x ~/script/git-status-checker and then run the script by typing ~/script/git-status-checker.\n  Using sh or bash command. For example: If i want to run my git-status-checker script, then i run the script by typing sh git-status-checker or bash git-status-checker, both command basically do the same thing.\n  The Test In this post, i\u0026rsquo;m gonna test the runtime both python script and shell script that i\u0026rsquo;ve made. The script objective is to check git status in each git repo directory on my machine.\nThe Environment of The Test All my git repo directory is located in all_git directory on home directory, so i only need to focus on that directory which is gonna make the task of the script a little bit easier and faster than check all other directory too.\nThe amount of not staged for commit is the same when running both script, which is around 13 in total. So the performance may decrease as the amount of unstaged increase.\nI\u0026rsquo;m gonna run the in two way, the first test is including git status for git submodules and the second test is excluding git status for git submodules.\nThe Results First Test In the first test, the runtime of python script is around 0.08 - 0.12 seconds and the runtime of shell script is around 0.07 - 0.08 seconds. Here\u0026rsquo;s the example of runtime of both script (which at this time coincidentally the same):\nSecond Test In the second test, the runtime of python script is around 0.05 - 0.07 seconds and the runtime of shell script is around 0.01 - 0.02 seconds. Here\u0026rsquo;s the example of runtime of both script:\nThe Explanation The effect of checking git status in git submodules is quite a lot but still less than a second which gonna make people think \u0026ldquo;it\u0026rsquo;s not that much of a difference\u0026rdquo;, well, in case you forgot that this script objective is just to check git status on each git repo directory, it\u0026rsquo;s just a simple task. If you\u0026rsquo;re going to make a more complicated task with a lot of command, that\u0026rsquo;s where you\u0026rsquo;re gonna see the gap.\nI\u0026rsquo;m gonna explain the first test source code first, below is the python script for the first test:\n1import os 2 3home = \u0026#39;/home/bruhtus/\u0026#39; 4dir_list = [dirname for dirname in os.listdir(f\u0026#39;{home}/all_git\u0026#39;) if os.path.isdir(f\u0026#39;{home}/all_git/{dirname}\u0026#39;) == True] 5 6for dirname in dir_list: 7 path = f\u0026#39;{home}/all_git/{dirname}\u0026#39; 8 os.system(f\u0026#39;echo {path}\u0026#39;) 9 10 if os.path.exists(f\u0026#39;{path}/.gitmodules\u0026#39;) == True: 11 os.system(f\u0026#39;git -C {path}status -s\u0026#39;) 12 os.system(f\u0026#39;git -C {path}submodule foreach git status -s\u0026#39;) 13 else: 14 os.system(f\u0026#39;git -C {path}status -s\u0026#39;) And below is the shell script for the first test:\n1#!/bin/sh 2 3for d in $(ls -d ~/all_git/*/); do 4 echo $d \u0026amp;\u0026amp; git -C $d status -s \u0026amp;\u0026amp; ls -a $d | grep -q .gitmodules \u0026amp;\u0026amp; git -C $d submodule foreach git status -s 5done Let\u0026rsquo;s take step by step of the processes. The first process is to list all directory in all_git directory, because we already specify that all git repo directory gonna be in all_git directory so we don\u0026rsquo;t need to check if it\u0026rsquo;s a git repo or not (one less task). So, here\u0026rsquo;s a comparison of the python script and shell script:\nThe python part below:\n1home = \u0026#39;/home/bruhtus/\u0026#39; 2dir_list = [dirname for dirname in os.listdir(f\u0026#39;{home}/all_git\u0026#39;) if os.path.isdir(f\u0026#39;{home}/all_git/{dirname}\u0026#39;) == True] 3 4for dirname in dir_list: is equivalent to this part in shell script:\n1for d in $(ls -d ~/all_git/*/); do Both of the script take list of directory in all_git directory and do a for loop to check each folder. You might be able to optimize my python script but i think that the shell script is much simpler than python script. What i mean simpler is less lines of code, not easier to understand. If you need an easier to understand code then python is the way, but it\u0026rsquo;s not really the topic of this post (everyone knows that python script is human readable, right?).\nLet\u0026rsquo;s continue, in the python part below:\n1 path = f\u0026#39;{home}/all_git/{dirname}\u0026#39; 2 os.system(f\u0026#39;echo {path}\u0026#39;) 3 4 if os.path.exists(f\u0026#39;{path}/.gitmodules\u0026#39;) == True: 5 os.system(f\u0026#39;git -C {path}status -s\u0026#39;) 6 os.system(f\u0026#39;git -C {path}submodule foreach git status -s\u0026#39;) 7 else: 8 os.system(f\u0026#39;git -C {path}status -s\u0026#39;) is equivalent to this part in shell script:\n1 echo $d \u0026amp;\u0026amp; git -C $d status -s \u0026amp;\u0026amp; ls -a $d | grep -q .gitmodules \u0026amp;\u0026amp; git -C $d submodule foreach git status -s 2done That second process is to check the git status and git submodules status of all directories. The part where there\u0026rsquo;s echo is basically print out anything that we give, in this case it\u0026rsquo;s gonna print directory name so i\u0026rsquo;m not gonna go into detail for that part.\nNow i\u0026rsquo;m gonna explain a little bit about \u0026amp;\u0026amp; command in shell, it\u0026rsquo;s basically let you run the second command (on the right side) if the first command (on the left side) success. So, it\u0026rsquo;s basically an equivalent of if-else statement in most programming language. The shell script part below:\n1git -C $d status -s \u0026amp;\u0026amp; ls -a $d | grep -q .gitmodules \u0026amp;\u0026amp; git -C $d submodule foreach git status -s is equivalent to this part of python script:\n1 if os.path.exists(f\u0026#39;{path}/.gitmodules\u0026#39;) == True: 2 os.system(f\u0026#39;git -C {path}status -s\u0026#39;) 3 os.system(f\u0026#39;git -C {path}submodule foreach git status -s\u0026#39;) 4 else: 5 os.system(f\u0026#39;git -C {path}status -s\u0026#39;) The ls -a $d | grep -q .gitmodules is equivalent to if os.path.exists(f'{path}/.gitmodules') == True, both command check if there\u0026rsquo;s a git submodules in the git repo directory or not. So in the second test, i\u0026rsquo;m removing those if-else statement and then run only git status which makes shell script faster than python script.\nThe Conclusion For command line interface stuff, you should probably use shell script instead of python script. I\u0026rsquo;m not saying that python is bad, it\u0026rsquo;s just not the right tool for command line interface stuff. Yeah python can do almost everything but that doesn\u0026rsquo;t mean python is the best at everything, at least not at command line interface use case which is shell script clearly better here.\nReferences  Luke smith youtube channel . Distrotube youtube channel . Git command without change directory . Git submodule documentation .  "
    }
,
    {
        "ref": "https://bruhtus.github.io/posts/instasaver/",
        "title": "Instasaver: Save Your Chosen Instagram Posts",
        "section": "posts",
        "tags": ["No one asked","Python"],
        "date" : "2020.11.09",
        "body": " A brief explanation about instasaver, a tool to save instagram post build with instaloader python module and streamlit.\n Background Story  Nothing fancy, you should probably skip this.\n To make things short, basically i was inspired by Kevin Hazy\u0026rsquo;s project here . After i see Kevin\u0026rsquo;s project, i was like \u0026ldquo;can i make almost the same thing with python?\u0026rdquo; and that was the trigger.\nIf you ask me why i want a tool (kind of) to save instagram post, that\u0026rsquo;s because i have a hard time to save video memes on instagram and i don\u0026rsquo;t really want to use a screen recorder (said the guy who made something that took longer than learning how to use screen recorder and edit the result 👀). So anyway, that\u0026rsquo;s my motivation to made this. For the memes!\nInstaloader Python Module  In this part, i\u0026rsquo;m only gonna explain the part that i\u0026rsquo;ve used and tried along with the problem that i\u0026rsquo;ve encountered. So for the full documentations, you can check here .\n Instaloader Feature That I Used There\u0026rsquo;re a lot of things you can do with instaloader like saving instagram stories, follower list, following list, and so on, but for this project i only use saving post feature. Why i only use that feature? because other features require login to instagram account, i\u0026rsquo;ll explain on that later.\nSo, even only saving post feature has a lot going on but i\u0026rsquo;m not quite sure how to implement that, the only thing i\u0026rsquo;m sure is how to implement saving post using a url (well, also other features that require login too). If you want to learn other features you can check their documentations which is quite confusing. Well, maybe i\u0026rsquo;m just a complete idiot but you know what, you\u0026rsquo;re gonna have other complete idiots that didn\u0026rsquo;t understand their documentations. I don\u0026rsquo;t really want to be hard on them but they could have done better, especially on the examples (not only advance examples but basic examples too).\nInstaloader Feature That I\u0026rsquo;ve Tried Apart from saving post feature, i\u0026rsquo;ve also implemented saving stories, following list, and follower list. As i\u0026rsquo;ve mentioned above, those three features require login to instagram account. Well, you can made a fake account to login to instagram but it\u0026rsquo;s not ideal to deploy it. There\u0026rsquo;s this problem when you login quite often so you need to wait around 15 minute to use it again, i mean if i want everyone else to access it then that problem gonna be a hassle. I\u0026rsquo;ve never tried to make a lot of fake account and rotate through all of them to login but i might do it later, who knows. If you want to see all the features that i didn\u0026rsquo;t implement in the public version, you can check my github repo here .\nImplementation With Streamlit  In this part, i\u0026rsquo;m gonna explain the implementation with streamlit and how to deploy on streamlit sharing.\n Instaloader (Main Class) For starter, in instaloader main class (Instaloader ) the parameters that used in this project was dirname_pattern, download_comments, download_geotags, download_video_thumbnails, and save_metadata.\ndirname_pattern was to make the default folder to save the file which in this case i use temporary folder because i don\u0026rsquo;t want to save the images or videos on my github repo but download it to my device (whether smartphone or pc).\ndownload_comments, download_geotags, download_video_thumbnails, and save_metadata is set to False just to make it simple, i just want to download the memes (whether images or videos) and i don\u0026rsquo;t want anything else. You could turn that on to get all that stuff tho.\nShort code To extract the short code, i used regular expression from this source and then using instaloader Post.from_shortcode and download_post to finally download the post (saved in temporary folder first and then generate download button to save to device).\nPublic Version What i mean by public version is the version that i deploy so that everyone can use it. For the public version, i only use saving post with url input. The diagram process is below:\nAs you see above, you can download one item or multiple items in one post. Implementation for download instagram post with streamlit is first you download the post from url using instaloader download_post and saved it to temporary folder and then define exception handling to detect whether it\u0026rsquo;s an image or a video. The implementation is below:\n1import instaloader 2import streamlit as st 3import os 4from zipfile import ZipFile 5 6post = instaloader.Post.from_shortcode(instaloader.Instaloader.context, shortcode) 7instaloader.Instaloader.download_post(post, target=temp) #temp is temporary folder 8file_list = [filename for filename in os.listdir] 9 10if len(file_list) == 1: #if only one item in one post 11 try: 12 st.image(f\u0026#39;{temp}/{file_list[0]}\u0026#39;, use_column_width=True) #use_column_width is to resize the width of the image displayed 13 st.markdown(download_button(f\u0026#39;{temp}/{file_list[0]}\u0026#39;, temp), unsafe_allow_html=True) #download_button is to generate link to download the file 14 except: 15 st.video(f\u0026#39;{temp}/{file_list[0]}\u0026#39;) 16 st.markdown(download_button(f\u0026#39;{temp}/{file_list[0]}\u0026#39;, temp), unsafe_allow_html=True) #download_button is to generate link to download the file 17 18else: #if more than one item in one post 19 with ZipFile(f\u0026#39;{temp}/{shortcode}_posts.zip\u0026#39;, \u0026#39;w\u0026#39;) as zip: #put all the posts into zip file 20 for filename in file_list: 21 try: 22 st.image(f\u0026#39;{temp}/{filename}\u0026#39;, use_column_width=True) 23 st.markdown(download_button(f\u0026#39;{temp}/{filename}\u0026#39;, temp), unsafe_allow_html=True) 24 zip.write(f\u0026#39;{temp}/{filename}\u0026#39;) 25 except: 26 st.video(f\u0026#39;{temp}/{filename}\u0026#39;) 27 st.markdown(download_button(f\u0026#39;{temp}/{filename}\u0026#39;, temp), unsafe_allow_html=True) 28 zip.write(f\u0026#39;{temp}/{filename}\u0026#39;) 29 30 st.markdown(download_button(f\u0026#39;{temp}/{filename}\u0026#39;, temp), unsafe_allow_html=True) please keep in mind that the implementation above is only a partial from all the code, it\u0026rsquo;s just a glimpse of what\u0026rsquo;s going on inside the process. For the full code you can check here .\nLocal Version What i mean by local version is the version that has a more features than the public version that requires login to instagram account. For the local version, i use download the post from url feature (like the public version), download stories (download all the stories of the user, public profile only or you already followed the private account), and download following and follower list.\nDownload stories For download stories, i used download_stories module with user id as input and zip all the stories. Below is a diagram process of the download stories:\nglimpse of the process:\n1import instaloader 2from zipfile import ZipFile 3 4load = instaloader.Instaloader() 5profile = instaloader.Profile.from_username(load.context, username) 6profile_id = instaloader.Instaloader.check_profile_id(username) 7load.download_stories(userids=[profile_id.userid]) 8 9with ZipFile(f\u0026#39;{temp}/{profile.username}_stories.zip\u0026#39;, \u0026#39;w\u0026#39;_) as zip: 10 for filename in file_list: 11 zip.write(f\u0026#39;{temp}/{filename}\u0026#39;) 12 13st.markdown(download_button(f\u0026#39;{temp}/{profile.username}_stories.zip\u0026#39;, temp), unsafe_allow_html=True) Download following and follower list For download following and follower list, i used get_followees and get_followers module with username as input and write all user\u0026rsquo;s following and follower username in .txt file.\nglimpse of the process (download following list):\n1import instaloader 2 3load = instaloader.Instaloader() 4profile = instaloader.Profile.from_username(load.context, username) 5 6with open(f\u0026#39;{temp}/{profile.username}_following.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: 7 for following in profile.get_followees(): 8 f.write(f\u0026#39;{following.username}\\n\u0026#39;) 9 10st.markdown(download_button(f\u0026#39;{temp}/{profile.username}_follower.txt\u0026#39;, temp), unsafe_allow_html=True) Deployment I use streamlit sharing and heroku to deploy this project, why i use two services to deploy this project? that\u0026rsquo;s because i want to try web app deployement on heroku and streamlit sharing (which is quite new).\nStreamlit Sharing To deploy on streamlit sharing you need to request an invite in their website and then after that you can deploy your streamlit app. It takes a few minutes to deploy the first time but after that it\u0026rsquo;s deploy in an instant. You can check the live demo on streamlit sharing here .\nHeroku To deploy on heroku, you need a few thing and here\u0026rsquo;s the list:\n runtime.txt -\u0026gt; to specify python version. Procfile -\u0026gt; to specify type of our application and run command, check here for more info. create_config.sh (or setup.sh, whatever you want) -\u0026gt; to make config.toml for streamlit to run.  I don\u0026rsquo;t really need to explain about runtime.txt, do i? you just need to type your python version, for example python-3.7.5, that\u0026rsquo;s all (i explain it anyway, dammit).\nFor .sh file (in this case i\u0026rsquo;m gonna name it create_config.sh because i\u0026rsquo;m not creative, sorry), type this:\n1mkdir -p ~/.streamlit 2 3echo \u0026#34;[server] 4headless = true 5port = $PORT6enableCORS = false 7\u0026#34; \u0026gt; ~/.streamlit/config.toml For Procfile, you don\u0026rsquo;t need to add an extention there. Just Procfile is enough. In the Procfile, type this:\nweb: sh create_config.sh \u0026amp;\u0026amp; streamlit run instasaver.py You don\u0026rsquo;t need to name it create_config.sh, be creative, don\u0026rsquo;t be like me.\nAfter all that, you can deploy it using git or from github or something else (i don\u0026rsquo;t remember all the choices). If you want to deploy it using git workflow, you can check here .\nFor live demo on heroku, you can check here .\nReferences  The one who trigger me to made this . Instaloader documentations . Streamlit . Download instagram stories . View public profile anonymous (more advance version) . Streamlit multiselect nested in if . Streamlit download file . Deploy streamlit app on heroku example .  "
    }
]
