[{"ref":"https://bruhtus.github.io/posts/postgres-export-query-result-from-remote-to-local-csv/","title":"Postgresql Export Query Result From Remote to Local in CSV file","section":"posts","tags":["Notes","Postgresql"],"date":"2023.07.25","body":"A Brief Intro Have you ever thought of how to get postgresql query result from remote server to our local machine?\nIf so, this short post might be for you.\nHow? Before we start, please keep in mind that there are other methods to get postgresql query result from remote server to local machine, the method that i mentioned after this is the easier method for me.\nAlright, let\u0026rsquo;s get to it!\nBefore we start, you need to configure the ssh stuff like private key and so on. So i will assume you already set it up in your ssh config.\nIn this post we\u0026rsquo;ll use psql to get the query result and copy() function from postgresql.\nNow, let\u0026rsquo;s say we have this query:\nSELECTcount(*)asuser_countFROMusers;and we want to put those query result in user-count.csv.\nThe first thing we need to do is make a query file with the sql query above and copy() like this:\ncopy(SELECTcount(*)asuser_countFROMusers;)TOstdoutWITHcsvheaderFor simplicity, we will put those sql query in a file called query. After that, we can use this command:\nssh server-config \u0026#39;psql -d postgresql://user:password@localhost:5432/db-name\u0026#39; \u0026lt; query Please keep in mind that server-config is our ssh configuration in ~/.ssh/config, and postgresql://user:password@localhost:5432/db-name is our postgresql data source name (DSN).\nIf our query has result, we will see them in our terminal. Now to put those result in csv file, we can use redirection like this:\nssh server-config \u0026#39;psql -d postgresql://user:password@localhost:5432/db-name\u0026#39; \u0026lt; query \u0026gt; user-count.csv And, that\u0026rsquo;s it. Now we have our query result in csv file. Alright, see you next time!\nReferences  Stackoverflow ssh with psql . Stackoverflow psql using stdin .  "},{"ref":"https://bruhtus.github.io/posts/postgres-exist-clause/","title":"Postgres Exist Clause","section":"posts","tags":["Notes","Postgresql"],"date":"2023.07.20","body":"A Brief Intro Have you ever wondering, rather than show the data, can we show the true or false if the data exist or not?\nIf so, then this short post might be for you!\nHow? In this post we will take a look at exists postgresql function. Before we start, please keep in mind that exists use subquery, so there is a penalty of subquery here.\nThe exists will evaluate if the subquery return any rows. If it returns at least one row, the result of exists is true, if not, then the result of exists is false.\nWe can use that in SELECT statement like this:\nSELECTexists(SELECTusers.emailFROMusersWHEREusers.email=participants.email)FROMparticipants;Or we can use it in WHERE statement like this:\nSELECTparticipants.emailFROMparticipantsWHEREexists(SELECTusers.emailFROMusersWHERE(users.role=\u0026#39;sponsor\u0026#39;ANDusers.email=participants.email))This can be useful if we don\u0026rsquo;t want to join the table. Alright, that\u0026rsquo;s it for this post. See you next time!\nReferences  Postgresql subquery expressions documentation . Stackoverflow return false if no rows .  "},{"ref":"https://bruhtus.github.io/posts/postgres-count-data-on-different-condition/","title":"Postgresql Count Data on Different Condition in The Same Query","section":"posts","tags":["Notes","Postgresql"],"date":"2023.07.18","body":"A Brief Intro Have you ever wondering how to count all the data and specific data with a certain condition on one query? If so, then this short post might be for you.\nLet\u0026rsquo;s get started!\nHow? Let\u0026rsquo;s say we organize an event and we store the participants data on our postgresql database.\nNow we want to know all the participants that registered for the event and all the participants that actually attended the event. That means, even though someone register for the event, they might not attend the event.\nWith that in mind, we can use FILTER clause in our query like this:\nSELECTcount(*)ASregistered_participants,count(*)FILTER(WHEREparticipants.status=\u0026#39;attended\u0026#39;)ASattended_participantsFROMparticipants;Alright, that\u0026rsquo;s it for now. See you next time!\nReferences  Postgresql sql expressions documentation . Stackoverflow count with different condition on the same query .  "},{"ref":"https://bruhtus.github.io/posts/postgres-get-current-database-size/","title":"Postgresql Get Current Database Size","section":"posts","tags":["Notes","Postgresql"],"date":"2023.07.18","body":"A Brief Intro Have you ever wondering the size of our current postgresql database? If so, this short post might be for you.\nLet\u0026rsquo;s get started!\nHow? In postgresql, there\u0026rsquo;s a function called pg_database_size() which computes the total disk space used by the database with specified database name.\nWe can use pg_database_size() like this:\nSELECTpg_database_size(\u0026#39;db-name\u0026#39;);The output of pg_database_size() is in bytes, so if we want to display the output in a human-readable format (kb, mb, and so on), we can use function pg_size_pretty() like this:\nSELECTpg_size_pretty(pg_database_size(\u0026#39;db-name\u0026#39;));If we want to check all available database, we can use pg_database system table like this:\nSELECTpg_database.datnameASdb_name,pg_size_pretty(pg_database_size(pg_database.datname))ASdb_sizeFROMpg_databaseORDERBYpg_database_size(pg_database.datname)DESC;Alright, that\u0026rsquo;s all for now. See you next time!\nReferences  Postgresql System Administration Functions Documentation . Stackoverflow how to get db names and size .  "},{"ref":"https://bruhtus.github.io/posts/postgres-count-weekly-with-bigint-data-type/","title":"Postgresql Count Weekly With Bigint Data Type","section":"posts","tags":["Notes","Postgresql"],"date":"2023.06.26","body":"A Brief Intro Let\u0026rsquo;s say we have a created_at column in our database with data type big integer that has a value with this equation:\nEXTRACT(EPOCHFROMNOW())*1000 Don\u0026rsquo;t ask me why the value of created_at like that because i have no idea.\n Now, the goals is to count every data per week.\nHow? How to do that? Because we use a unix timestamp which look like this 1687746597339, we need to convert those into timestamp using postgresql to_timestamp() function like this:\nto_timestamp(created_at/1000) We divide by 1000 because we multiple it by 1000 when we insert the value.\n And then, we need to truncate into a specific date. We can use date_trunc() function to truncate the date.\nAccording to the documentation, this is the parameter for date_trunc():\ndate_trunc(field,source[,time_zone])Valid values for field are:\n microseconds milliseconds second minute hour day week month quarter year decade century millennium  source is either timestamp or interval and return timestamp or interval depending on the source.\ntime_zone is an optional parameter to specify a different timezone. By default, truncation is done with the current timezone setting.\nIf we combine date_trunc() and to_timestamp(), we will get something like this:\ndate_trunc(\u0026#39;week\u0026#39;,to_timestamp(created_at/1000))If we make the entire query, it would be something like this (let\u0026rsquo;s say the table name is participants):\nSELECTdate_trunc(\u0026#39;week\u0026#39;,to_timestamp(created_at/1000))ASweekly,COUNT(*)AStotal_participantsGROUPBYweeklyORDERBYweeklyASC;And the result would be something like this:\nweekly|total_participants------------------------+-------------------------- 2023-06-1900:00:00+07|694202023-06-2600:00:00+07|69 00:00:00+07 is because the timezone setting on my database is asia/jakarta which is basically UTC+7. If your timezone setting is different, the timestamp might be different.\nStill not sure why the date_trunc() with field week start at monday, and, at the time of writing this post, i haven\u0026rsquo;t found a settings to change that.\n Alright, that\u0026rsquo;s it. See you next time!\nReferences  Postgresql Date/Time Functions and Operator Documentations . Postgresql tutorial date_trunc() function . Stackoverflow group by week in postgresql .  "},{"ref":"https://bruhtus.github.io/posts/postgres-update-multiple-rows-in-one-query/","title":"Postgresql Update Multiple Rows with One Query","section":"posts","tags":["Notes","Postgresql"],"date":"2023.06.01","body":"A Brief Intro Have you ever wondering how to update multiple rows with one query? Let\u0026rsquo;s say you want to change value on table A where the name is anu on year 2019, 2020, and 2021.\nRather than doing 3 query with different WHERE statement, we can do that with one query. Without further ado, let\u0026rsquo;s go straight to it!\nFROM statement Postgresql has FROM clause in UPDATE statement which let us use columns on other table, it use the same syntax as FROM clause in SELECT statement.\nWe can combine FROM clause with VALUES expression. VALUES in postgresql let us create a constant table which means we can generate a table with constant values that can be used in a query without having to actually create and populate the table on disk.\nNow here\u0026rsquo;s an example case:\nLet\u0026rsquo;s say we need to update the price rows on area tokyo at table meat with year 2019, 2020, and 2021. We can make the query like this:\nUPDATEmeatSETprice=new.priceFROM(values(6942,2019),(69420,2020),(69690,2021),)ASnew(price,year)WHEREmeat.areaILIKE\u0026#39;tokyo\u0026#39;ANDmeat.year=new.yearRETURNING*;You can change the new in new(price, year) with anything you like.\nAnother example case:\nLet\u0026rsquo;s say we need to update the city\u0026rsquo;s population on specific regencies. So we need to update data on population column in city table which has reference to regencies id. We can make the query like this:\nUPDATEcitySETpopulation=new.populationFROMregencies,(values(\u0026#39;city 1\u0026#39;,69420),(\u0026#39;city 2\u0026#39;,6969))ASnew(regency,population)WHEREregencies.id=city.regency_idANDregencies.regencyilikenew.regencyRETURNINGregencies.regency,city.population; The RETURNING clause is optional, it\u0026rsquo;s a way to check if we really changed the right rows or not. The ILIKE clause is an expression for insensitive case.\n Alright, that\u0026rsquo;s it. See you next time!\nReferences  Stackoverflow example . Postgresql update documentation . Postgresql values documentation .  "},{"ref":"https://bruhtus.github.io/posts/postgres-delete-using/","title":"Postgresql's USING Clause on DELETE Statement","section":"posts","tags":["Notes","Postgresql"],"date":"2023.06.01","body":"A Brief Intro The USING clause on DELETE statement is basically let us join multiple table and delete only the data from those join.\nIf you ever use mysql DELETE JOIN with INNER JOIN, then postgresql USING is kind of similar to that except it can only delete from one table by default.\nHow? How to do that? Here\u0026rsquo;s an example:\nLet\u0026rsquo;s say we have table A and table B which is referenced to table C by id. If we use SELECT statement on table C with INNER JOIN on table A, it would look like this:\nSELECT*FROMCINNERJOINAONA.C_id=C.id;Now, if we want to only delete all records from table C related to table A without deleting all records from table C related to table B, we can use DELETE with USING clause like this:\nDELETEFROMCUSINGAWHEREA.C_id=C.id; Please keep in mind that if you haven\u0026rsquo;t set the ON DELETE CASCADE for table A on reference C_id, that query will throw an error.\n Alright, that\u0026rsquo;s it. See you next time!\nReferences  Postgresql delete documentation . Postgresql delete using tutorial . MySQL delete join tutorial .  "}]