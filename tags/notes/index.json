[{"ref":"https://bruhtus.github.io/posts/clean-up-untracked-file-in-git-repo/","title":"Clean Up Untracked File in Git Repo","section":"posts","tags":["Notes","Linux","Shell"],"date":"2022.08.20","body":"Have you ever feels like deleting all the untracked file or directory in git repository is such a pain?\nIf you do, then this post might be for you!\nOk, first thing first, there is a git command clean which help us delete the untracked file. We can even use it with interactive interface. To invoke the interactive interface, we can use this command:\ngit clean -i . What that command does is prompt us an interactive interface with all the untracked file in current directory.\nTo make it start from the root of git repository, we can use this command:\ngit clean -i $(git rev-parse --show-toplevel) The git rev-parse --show-toplevel will get us the path of current git repository root. If you don\u0026rsquo;t know what i mean by git repository root, we can think of it as the directory or path that has .git directory.\nBut, the clean command has a downside. The clean command does not let us select specific file under untracked directory. It will only let us delete the entire untracked directory with all the file in it.\nTo get around this issue, we can make a shell alias like this:\nalias gurm=\u0026#39;git ls-files --others --exclude-standard | fzf --multi | xargs -r rm -v\u0026#39;  You can change gurm to anything you want.\n The dependencies from shell alias above are:\n git fzf xargs  git ls-files --others --exclude-standard will list all the untracked file and also exclude the file from .gitignore.\nfzf is a fuzzy finder to select the untracked file we want to remove, we also give flags --multi so that we can select multiple file with tab key.\nFinally, we execute rm command with xargs -r. What xargs -r do is make sure that we have some input from standard input (stdin), if there is no input from stdin, xargs will not execute the command. It is useful to prevent an error from a command that require an argument.\nAlright, that\u0026rsquo;s all. Have a nice day!\n"},{"ref":"https://bruhtus.github.io/posts/awk-print-row-instead-of-column/","title":"Awk Print Row Instead of Column","section":"posts","tags":["Notes","Linux","Shell"],"date":"2022.06.18","body":"Main Course Let\u0026rsquo;s say we have an output from xrandr --listactivemonitor like this:\nMonitors: 2 0: +*eDP-1 1920/344x1080/194+1920+0 eDP-1 1: +HDMI-2 1920/480x1080/270+0+0 HDMI-2 Now, we want to display only the second row which is this line:\n0: +*eDP-1 1920/344x1080/194+1920+0 eDP-1 We can do that using awk with this command:\nxrandr --listactivemonitor | awk \u0026#39;NR==2\u0026#39; or using process substitution command, like this:\nawk \u0026#39;NR==2\u0026#39; \u0026lt;(xrandr --listactivemonitor) If we also want to limit the row and the column, let\u0026rsquo;s say the second row and the third column which is result in this:\n1920/344x1080/194+1920+0 We can do that with this command:\nxrandr --listactivemonitor | awk \u0026#39;NR==2 {print $3}\u0026#39; or using process substitution command, like this:\nawk \u0026#39;NR==2 {print $3}\u0026#39; \u0026lt;(xrandr --listactivemonitor) Now, if we want to display the second to last row, which is this line:\n0: +*eDP-1 1920/344x1080/194+1920+0 eDP-1 1: +HDMI-2 1920/480x1080/270+0+0 HDMI-2 We can do that with this command:\nxrandr --listactivemonitor | awk \u0026#39;NR\u0026gt;=2\u0026#39; or using process substitution command, like this:\nawk \u0026#39;NR\u0026gt;=2\u0026#39; \u0026lt;(xrandr --listactivemonitor) Alright, that\u0026rsquo;s all. Thanks for reading and happy shell scripting!\nReference  Stackoverflow answer about awk for specific row .  "},{"ref":"https://bruhtus.github.io/posts/shell-process-substitution-as-temp-file/","title":"Shell Process Substitution as Temp File","section":"posts","tags":["Notes","Linux","Shell"],"date":"2022.06.11","body":"A Brief Intro This is all started when i\u0026rsquo;m trying to make a shell alias using fzf and git add -p command. And i was surprised that the interactive selection from git add -p immediately terminated before i can even press any key. Let\u0026rsquo;s get started, shall we?\nFirst Attempt My first attempt to make that shell alias was something like this:\nalias gap=\u0026#39;git status -s | awk \u0026#34;{print \\$2}\u0026#34; | fzf | xargs -r git add -p\u0026#39; Let me briefly explain one by one the command that i use in my shell alias:\n  git status -s -\u0026gt; The short format of git status, without unnecessary info (at least for me).\n  awk \u0026quot;{print \\$2}\u0026quot; -\u0026gt; Only use the second column. The backslash is to prevent shell to expand $2 into a second argument instead of a second column in awk.\n  fzf -\u0026gt; Fuzzy finder by Junegunn1.\n  xargs -r -\u0026gt; Do not run the command if there\u0026rsquo;s no standard input.\n  git add -p -\u0026gt; To add a chunk of changes, only works if the file already tracked by git.\n  This alias is where the problem arise. After i select the file name using fzf, the interactive interface of git add -p only appear for a few seconds and then terminated.\nAccording to stackoverflow answer2:\n Without further arguments xargs does not work with interactive (command line) applications.\nThe reason for that is, by default xargs gets its input from stdin but interactive applications also expect input from stdin.\nTo prevent the applications from grabbing input that is intended for xargs, xargs redirects stdin from /dev/null for the applications it runs.\nThis leads to the application just receiving an EOF3.\n With that in mind, we need to use --arg-file=\u0026lt;file\u0026gt; or -a \u0026lt;file\u0026gt; flag, which means that xargs will read from a \u0026lt;file\u0026gt; instead of stdin ( standard input) so that the stdin remains unchanged. Alright, let\u0026rsquo;s go to the second attempt.\nSecond Attempt Following the stackoverflow answer2, my second attempt was something like this:\nalias gap=\u0026#39;xargs -a \u0026lt;(git status -s | awk \u0026#34;{print \\$2}\u0026#34; | fzf) git add -p\u0026#39; The expression \u0026lt;(git status -s | awk \u0026quot;{print \\$2}\u0026quot; | fzf) is what we called process substitution (or to be precise, shell process substitution).\nInstead of using a file, we use a command to act like a temporary file.\nNow, the problem is, in my experiment i can\u0026rsquo;t use fzf with the shell process substitution because shell process substitution produces a special file that can only be opened and read, but not written or seeked4.\nCommands that treat their arguments as pure streams will works with shell process substitution, but the commands that seek a file they are given (or write to a file) won\u0026rsquo;t work4.\nAnd that is why we can\u0026rsquo;t use interactive command such as fzf with shell process substitution.\nConclusion With all the information from my experiment before, i decided to remove fzf from the alias, which result with this alias:\nalias gap=\u0026#39;xargs -a \u0026lt;(git status -s | awk \u0026#34;{print \\$2}\u0026#34;) git add -p\u0026#39; Is it fulfilling what i need? Not really, i might replace that with shell function instead of shell alias soon. But, i learn something new about shell process substitution.\nExtra Note For more info about the xargs and git flags, check the manpage. For example: man xargs or man git-add.\nIf we use echo with shell process substitution like this:\necho \u0026lt;(git status -s) That will show us where the temporary file created.\n  Fuzzy finder by Junegunn .\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Stackoverflow: xargs explanation .\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Triggering EOF explanation .\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Process substitution result in special file .\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "},{"ref":"https://bruhtus.github.io/posts/replacement-for-info-command/","title":"Replacement For Info Command","section":"posts","tags":["Notes","Linux","Shell"],"date":"2022.06.11","body":"A Brief Intro Sometime ago, someone posted a tweet about a replacement for rm -rf $HOME/directory that is mv $HOME/directory /dev/null. When i took a look of it, using the ls -l /dev/null command, i found something like this:\ncrw-rw-rw- 1 root root 1, 3 Jun 11 04:21 /dev/null Now, what is c in the crw below\ncrw-rw-rw- 1 root root 1, 3 Jun 11 04:21 /dev/null After going around on internet, i found an answer in stackexchange1. Which explain that c stands for character special file. Please keep in mind that everything in unix-like system is a file, even a directory (or some people called it folder) is a file with type directory.\n The file we usually use has a type of regular file.\n In the stackexchange, someone mentioned about info ls to show the file type with their respective character symbol. That\u0026rsquo;s what pique my interest, the info command.\nReplacement For info Command When i use the command info ls, i noticed that i can\u0026rsquo;t use j and k for navigation, which is a nightmare.\nSo, the first thing that i need to figure out is, how to change the pager used in info command. According to this stackexchange answer2, \u0026ldquo;info doesn\u0026rsquo;t use separate pager because it handles navigation\u0026rdquo;. So, basically there\u0026rsquo;s no hope with info command? Probably.\nAnd then, the person who answer on the stackexchange also give a suggestion about pinfo which, at least use j and k as down or up movement. Now i need to read the manpage about pinfo to configure it.\nWhat\u0026rsquo;s Next? Other than trying to configure pinfo, i might need to figure out what is the info documents is all about. This might be a new kind of documentation other than manpage that i can use (if the developer support it). Also, figure out about the character special file type.\n  Stackexchange: The meaning of c in crw-rw-rw- \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Stackexchange: Replacement for info command \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "}]